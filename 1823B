/* header file */
#include<bits/stdc++.h>
#include<stack>
#include <queue>
#include <algorithm>
#include<iostream>
#include<string>
/* for faster cin cout */
#define fast() ios_base::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr)
/* sort function */
#define strsort() sort(s.begin(),s.end())
#define arrsort() int n1=sizeof(a)/sizeof(a[0]);sort(a,a+n1)
/* legth function */
#define strlen s.size()
#define arrlen int n1=sizeof(a)/sizeof(a[0])
#define intlen int n2=trunc(log10(n))+1
/* Conver function */
#define csti int csti=stoi(s)
/* Others Sortcut */
#define PI 3.1415926535897932384626433832795
#define nn "\n"
#define yes "YES"
#define no "NO"
#define case "Case "
#define elif else if
//#define ll long long
#define lli long long int
/* testcase */
#define test() int t;cin>>t;while(t--)
#define testt() int t;cin>>t;for(int i=1; i<=t; i++)
using namespace std;
const long long MOD = 1e9 + 7;
/* GCD Finding Algo */
int gcd(int a, int b)
{
    if(b==0)
        return a;
    return gcd(b,a%b);
}
/*  let's started  */
void solved()
{
    int na,ma;
    cin>>na>>ma;
    vector<string> a(na);
    for(int i=0; i<na; i++) cin >> a[i];
    int nb,mb;
    cin>>nb>>mb;
    vector<string> b(nb);
    for(int i=0; i<nb; i++) cin>>b[i];

    int ansn=0,ansm=0,maxlap=0;
    int ln=max(na,nb), lm=max(ma,mb);
    for (int i = -ln; i <= ln; i++)
    {
        for (int j = -lm; j <= lm; j++)
        {
            int overlap = 0;
            for(int k=0; k<na; k++)
            {
                for(int l=0; l<ma; l++)
                {
                    int kk = k + i;
                    int ll = l + j;
                    if (kk < 0 || nb <= kk || ll < 0 || mb <= ll)continue;
                    if (a[k][l] == '1' && b[kk][ll] == '1')overlap++;
                }
            }
            if (maxlap <= overlap)
            {
                ansn = i;
                ansm = j;
                maxlap=overlap;
            }
        }
    }
    cout<<ansn <<' '<<ansm<<endl;
}
int main()
{
    fast();
    solved();
    return 0;
}
